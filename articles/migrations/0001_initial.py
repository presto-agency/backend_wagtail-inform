# Generated by Django 3.2.13 on 2023-02-15 08:44

import articles.blocks
import datetime
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.embeds.blocks
import wagtail.images.blocks
import wagtail.search.index
import wagtail_color_panel.fields
import wagtail_icon_picker.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0023_add_choose_permissions'),
        ('wagtailcore', '0066_collection_management_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('excerpt', models.TextField(blank=True)),
                ('body', wagtail.core.fields.StreamField([('heading', wagtail.core.blocks.CharBlock(form_classname='full title')), ('paragraph', articles.blocks.RichTextBlock()), ('image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('alt_text', wagtail.core.blocks.CharBlock()), ('caption', wagtail.core.blocks.CharBlock(required=False)), ('external_url', wagtail.core.blocks.URLBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False))])), ('embed', wagtail.embeds.blocks.EmbedBlock(max_height=400, max_width=800)), ('quote', wagtail.core.blocks.StructBlock([('quote', wagtail.core.blocks.TextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('image_alt_text', wagtail.core.blocks.CharBlock(required=False)), ('image_caption', wagtail.core.blocks.CharBlock(required=False)), ('image_align', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'Left'), ('right', 'Right')]))])), ('floating_image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('alt_text', wagtail.core.blocks.CharBlock()), ('align', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'Left'), ('right', 'Right')])), ('caption', wagtail.core.blocks.CharBlock(required=False)), ('external_url', wagtail.core.blocks.URLBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False))])), ('related_content', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('image_alt_text', wagtail.core.blocks.CharBlock()), ('heading', wagtail.core.blocks.CharBlock(required=False)), ('content', wagtail.core.blocks.CharBlock(required=False)), ('external_url', wagtail.core.blocks.URLBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False))]))])),
                ('wp_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('wp_url', models.CharField(blank=True, max_length=500, null=True)),
                ('wp_authors', models.TextField(blank=True)),
                ('indicator_of_time', models.CharField(blank=True, help_text='if the field is empty then calculation is done automatically', max_length=500, null=True)),
                ('thumbnail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='wagtailimages.image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ArticleArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ArticleCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127)),
            ],
            options={
                'verbose_name_plural': 'Article Categories',
                'ordering': ['name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ArticleSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127)),
                ('label_text', models.CharField(blank=True, help_text="The text to display on the label at the top-left corner of the Article's thumbnail image in Article lists. Leave blank to not add a label.", max_length=63)),
                ('label_text_mobile', models.CharField(blank=True, help_text='The same as the Label text field above, but a shorter version to be displayed on mobile layouts.', max_length=63)),
                ('text', wagtail.core.fields.RichTextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ArticlesRSSFeedsSettings',
            fields=[
                ('rssfeedssettings_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtail_feeds.rssfeedssettings')),
                ('feed_size', models.PositiveIntegerField(default=500, help_text='How many articles should there be in the feed? Larger the number, longer the time to generate the feed.', verbose_name='Feed size')),
                ('last_changed_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'RSS feed',
                'verbose_name_plural': 'RSS feeds',
            },
            bases=('wagtail_feeds.rssfeedssettings',),
        ),
        migrations.CreateModel(
            name='ArticleTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, unique=True)),
                ('slug', models.SlugField(max_length=127, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ArticleVertical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('privacy_policy_url', models.URLField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=127)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('postal_code', models.CharField(blank=True, max_length=63)),
                ('website', models.URLField(blank=True, null=True)),
                ('sector', models.CharField(blank=True, max_length=127)),
                ('role', models.CharField(blank=True, max_length=127)),
                ('summary', models.TextField(blank=True)),
                ('member_type', models.CharField(blank=True, max_length=127)),
                ('is_member', models.BooleanField(null=True)),
                ('membership_start_date', models.DateField(blank=True, null=True)),
                ('member_level', models.CharField(blank=True, max_length=127)),
                ('owner_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('owner_name', models.CharField(blank=True, max_length=127)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_name', models.CharField(blank=True, max_length=127)),
                ('contact_phone', models.CharField(blank=True, max_length=127)),
                ('hide_in_member_list', models.BooleanField(null=True)),
            ],
            options={
                'verbose_name_plural': 'Companies',
                'ordering': ['name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('gather_content_folder_id', models.UUIDField(blank=True, null=True)),
                ('subheader', models.CharField(blank=True, default='', help_text='Subheader to appear on the page of the container.', max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DTWChannel',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('subheader', models.CharField(blank=True, default='', help_text='Subheader to appear on the page of the container.', max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='EventSpeaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('job_title', models.CharField(blank=True, max_length=255)),
                ('about', models.TextField(blank=True, null=True)),
                ('avatar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='wagtailimages.image')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='articles.company')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='GenerateTopics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('parent_top', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='articles.articletopic')),
            ],
            options={
                'verbose_name': 'Generate Topic',
            },
        ),
        migrations.CreateModel(
            name='TopicsPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('subtitle', models.CharField(default='Browse Inform topics from A - Z', max_length=127)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='VuetifyIcon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon', wagtail_icon_picker.fields.IconField(max_length=70)),
                ('color', wagtail_color_panel.fields.ColorField(max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='ArticleContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='CaseStudy',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
                ('marketo_formid', models.IntegerField(blank=True, help_text='An ID for the formId field sent to Marketo when a user downloads or signs up for a webinar.', null=True, verbose_name='Marketo form ID')),
                ('marketo_programid', models.IntegerField(blank=True, help_text='An ID for the programId field sent to Marketo when a user uses a form to download or signs up for a webinar.', null=True, verbose_name='Marketo program ID')),
                ('casestudy_file', models.FileField(blank=True, null=True, upload_to='casestudies')),
            ],
            options={
                'verbose_name_plural': 'Case Studies',
            },
            bases=('articles.article', models.Model),
        ),
        migrations.CreateModel(
            name='CaseStudyContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='EBook',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
                ('ebook_file', models.FileField(blank=True, null=True, upload_to='ebooks')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.article',),
        ),
        migrations.CreateModel(
            name='EBookContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='Podcast',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.article',),
        ),
        migrations.CreateModel(
            name='PodcastContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='ProofOfConcept',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.article',),
        ),
        migrations.CreateModel(
            name='ProofOfConceptContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='ResearchReport',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
                ('report_file', models.FileField(blank=True, null=True, upload_to='reports')),
                ('view_online_url', models.URLField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.article',),
        ),
        migrations.CreateModel(
            name='ResearchReportContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.article',),
        ),
        migrations.CreateModel(
            name='SurveyContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
                ('transcription', wagtail.core.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.article',),
        ),
        migrations.CreateModel(
            name='VideoContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='VideoDTW',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('transcription', wagtail.core.fields.RichTextField(blank=True)),
                ('related', models.BooleanField(default=False)),
                ('video_dtw_name', models.FileField(blank=True, null=True, upload_to='videodtw')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.article', models.Model),
        ),
        migrations.CreateModel(
            name='VideoDTWContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='Webinar',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
                ('marketo_formid', models.IntegerField(blank=True, help_text='An ID for the formId field sent to Marketo when a user downloads or signs up for a webinar.', null=True, verbose_name='Marketo form ID')),
                ('marketo_programid', models.IntegerField(blank=True, help_text='An ID for the programId field sent to Marketo when a user uses a form to download or signs up for a webinar.', null=True, verbose_name='Marketo program ID')),
                ('start', models.DateTimeField(default=datetime.datetime.now)),
                ('end', models.DateTimeField(default=datetime.datetime.now)),
                ('view_url', models.URLField(blank=True, max_length=511, null=True)),
                ('register_url', models.URLField(blank=True, max_length=511, null=True)),
                ('location', models.CharField(blank=True, max_length=127)),
                ('region', models.CharField(blank=True, max_length=127)),
            ],
            options={
                'ordering': ('-start',),
            },
            bases=('articles.article', models.Model),
        ),
        migrations.CreateModel(
            name='WebinarContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='WhitePaper',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.article')),
                ('whitepaper_file', models.FileField(blank=True, null=True, upload_to='whitepapers')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.article',),
        ),
        migrations.CreateModel(
            name='WhitePaperContainer',
            fields=[
                ('container_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.container')),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.container',),
        ),
        migrations.CreateModel(
            name='TopicsPageTopics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='articles.topicspage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='articles.articletopic')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Summits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('text', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Summit',
                'verbose_name_plural': 'Summits',
                'ordering': ['name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.country')),
            ],
            options={
                'ordering': ['country', 'name'],
            },
        ),
        migrations.CreateModel(
            name='GenerateTopicsConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_topic', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='articles.generatetopics')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.articletopic')),
            ],
        ),
        migrations.AddField(
            model_name='company',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.country'),
        ),
        migrations.AddField(
            model_name='company',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.location'),
        ),
        migrations.AddField(
            model_name='company',
            name='logo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailimages.image'),
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=127)),
                ('last_name', models.CharField(blank=True, max_length=127)),
                ('display_name', models.CharField(max_length=255)),
                ('job_title', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('username', models.CharField(max_length=127)),
                ('biography', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('wp_id', models.IntegerField(blank=True, null=True)),
                ('avatar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='wagtailimages.image')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='articles.company')),
            ],
            options={
                'ordering': ['first_name', 'last_name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ArticleVerticalConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='verticals', to='articles.article')),
                ('vertical', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.articlevertical')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleTypesSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon')),
                ('casestudy_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon', verbose_name='Case study icon')),
                ('ebook_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon', verbose_name='eBook icon')),
                ('podcast_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon')),
                ('proofofconcept_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon', verbose_name='Proof of concept icon')),
                ('researchreport_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon', verbose_name='Research report icon')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
                ('survey_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon')),
                ('video_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon')),
                ('webinar_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon')),
                ('whitepaper_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='articles.vuetifyicon')),
            ],
            options={
                'verbose_name': 'Article types',
                'verbose_name_plural': 'Article types',
            },
        ),
        migrations.CreateModel(
            name='ArticleTopicConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='articles.article')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.articletopic')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleSummitsConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='summits', to='articles.article')),
                ('summit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.summits')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleSourceConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='articles.article')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.articlesource')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleCompanySponsorConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsors', to='articles.article')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleCompanyConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='companies', to='articles.article')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleCategoryConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='articles.article')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.articlecategory')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleBodyBackup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('body', models.JSONField()),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='body_backups', to='articles.article')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleAuthorsOrderable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='authors', to='articles.article')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='articles.author')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleAreaConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.articlearea')),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='areas', to='articles.article')),
            ],
        ),
        migrations.CreateModel(
            name='WebinarEventSpeakerConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speaker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.eventspeaker')),
                ('webinar', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='speakers', to='articles.webinar')),
            ],
        ),
    ]
